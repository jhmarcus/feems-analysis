#!/usr/bin/env python3
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import click
import numpy  as np
from pandas_plink import read_plink
# import feems


@click.command()
@click.option("--prefix", required=True, type=str)
@click.option("--coord", required=True, type=str)
@click.option("--grid", required=True, type=str)
@click.option("--edge", required=True, type=str)
@click.option("--out", required=True, type=str)
@click.option("--impute", required=False, default=False, type=bool)
@click.option("--lamb", required=True, type=float)
@click.option("--eta", required=True, type=float)
@click.option("--linesearch", required=False, default=False, type=bool)
@click.option("--minit", required=False, default=None, type=str)
@click.option("--maxiter", required=False, default=100000, type=int)
def run_feems(prefix, coord, grid, edge, out, impute, eta, linesearch, minit, maxiter):
    """Command line interface to run feems
    """
    # read genotypes
    (bim, fam, G) = read_plink(prefix)
    genotypes = (2.0 - np.array(G)).T
    n, p = genotypes.shape

    assert n < p, "There musts be more SNPs then individuals"
    assert set(np.unique(G)) == set([0, 1, 2, np.nan]), "Genoypes must be in 0,1,2,np.nan"

    #read the sample coordinates
    coord = np.loadtxt(coord_path)

    # grid and edge of the graph
    grid = np.loadtxt(grid).astype(np.int)
    edge = np.loadtxt(edge).astype(np.int)

    # setup feems object
    feems_ = FEEMS(genotypes, coord, grid, edge, impute=impute)
    
    # intialize m if an minit file is not provided
    if minit == None:
        m_init = np.random.uniform(.1, 50., grid.shape[0])
    
    # run feems
    feems_.fit(lamb, eta, line_search=linesearch, m_init=m_init, max_iter=maxiter)

    # TODO: write outputfile

if __name__ == "__main__":
    run_feems()